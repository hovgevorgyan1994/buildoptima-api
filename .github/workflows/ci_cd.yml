name: CI/CD

on:
  push:
    branches: [ "develop" ]
    
env:
  AWS_EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
  AWS_EC2_USER : ${{ secrets.EC2_USER }}
  AWS_EC2_IP_ADDRESS: ${{ secrets.EC2_IP_ADDRESS }}
  AWS_ECR_REGISTRY: 687676024420.dkr.ecr.us-east-1.amazonaws.com
  AWS_ECR_REPOSITORY: buildoptima

jobs:
  test_build_deploy:
    name: Test, Build & Deploy
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        name: buildoptima
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Run LocalStack Container
      run: docker-compose -f docker/docker-compose-test.yml up -d
    - name: Run Tests
      run: |
        mvn clean test --batch-mode
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        junit_files: "target/surefire-reports/*.xml"
    - name: Generate JaCoCo Badge
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
    - name: Commit/Push Badge
      uses: EndBug/add-and-commit@v7
      with:
        default_author: github_actions
        message: 'Commit badge'
        add: '*.svg'
    - name: Build with Maven
      run: mvn package -DskipTests
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY .
        docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY
        IMAGES_TO_DELETE=$( aws ecr list-images --repository-name $AWS_ECR_REPOSITORY --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
        aws ecr batch-delete-image --repository-name $AWS_ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true
    - name: Configure EC2 environment and deploy the application
      run: |
        echo "$AWS_EC2_PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i "private_key.pem" $AWS_EC2_USER@$AWS_EC2_IP_ADDRESS mkdir -p /home/ubuntu/buildoptima/data 
        scp -o StrictHostKeyChecking=no -i "private_key.pem" src/main/resources/db/init.sql $AWS_EC2_USER@$AWS_EC2_IP_ADDRESS:/home/ubuntu/buildoptima/init.sql
        scp -o StrictHostKeyChecking=no -i "private_key.pem" docker/docker-compose.yml $AWS_EC2_USER@$AWS_EC2_IP_ADDRESS:/home/ubuntu/buildoptima/docker-compose.yml
        ssh -o StrictHostKeyChecking=no -i "private_key.pem" $AWS_EC2_USER@$AWS_EC2_IP_ADDRESS /bin/bash <<EOT
        if ! docker --version>/dev/null; then
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt install docker.io
        fi
        if ! docker-compose --version>/dev/null; then
        sudo apt install docker-compose
        sudo service docker restart
        fi
        if ! aws --version>/dev/null; then
        sudo apt install awscli
        echo -e "[default]\naws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}\naws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" > /home/ubuntu/.aws/credentials
        echo -e "[default]\nregion = us-east-1\noutput = json" > /home/ubuntu/.aws/config
        fi;
        sudo docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) $AWS_ECR_REGISTRY
        cd /home/ubuntu/buildoptima
        sudo docker-compose pull
        sudo docker-compose up -d
        sudo docker image prune -af
        
      

    
